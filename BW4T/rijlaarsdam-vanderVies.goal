% GOAL Agent for "Blocks World for Teams", by:
% Matthijs Rijlaarsdam	4308417		mscrijlaarsdam@gmail.com
% Saul van der Vies		4356470		M.S.vanderVies@student.tudelft.nl

init module {
	knowledge {
		% A room is a place with exactly one neighbour, so there is only one way to get to and from that place.
		% A room is defined as a zone, with a PlaceID and list of neighbours which is exactly 1 item long 
		room(PlaceID) :- zone(_,PlaceID,_,_,Neighbours), length(Neighbours,1).
		
		% Color is the color needed to be dropped of at this moment
		% Color is defined here as the color that is required to be dropped in the drop zone next by getting color at current index
		nextColorInSeq(Color) :- sequenceIndex(Index), sequence(Colors), element_at(Color,Colors,Index).
		
		% get element X at index K of list [_|L]
		element_at(X,[X|_],0).
		element_at(X,[_|L],K) :- element_at(X,L,K1), K is K1 + 1.
		
	}
	program {
		% Store map information, navigation points in the agent's belief base.
		% Lists all zones in the agent's environment, along with the aspects of all the zones (ID, name of the zone, coï¿½rdinates, amount of neighbours)
		forall bel( percept(zone(ID, Name, X, Y, Neighbours)) ) do insert( zone(ID, Name, X, Y, Neighbours) ).

		% Records the initial state of movement in the belief base.
		% The state is set of the start position of the agent 
		if bel( percept(state(State)) ) then insert( state(State) ).

		% Adopts all the rooms initally, so that it will always search them all
		forall bel( room(Place) ) do adopt( in(Place) ).

		% Records all places in the environment in the belief case.
		forall bel(percept(place(Place))) do insert(place(Place)).
		
		%insert initial place
		if bel(percept(at(Place))) then insert(at(Place)).
		
		% Records initial sequenceIndex in the belief case
		% Stores the sequenceIndex as it is at the beginning of the program.
		if bel(percept(sequenceIndex(Index))) then insert(sequenceIndex(Index)).
		
		% Records initial color sequence int the belief case
		% Stores the color sequence as it is at the beginning of the program.
		if bel(percept(sequence(Colors))) then insert(sequence(Colors)).
		
	
		
		% don't search in the dropzone
		if a-goal( in('DropZone'))then drop (in('DropZone')).
		if true then insert (visited('DropZone')).
		
	}	
	actionspec {
		% The goTo action makes the agent move to a place (location) in the BW4T environment.
		% As long as the agent has not arrived at the place it is going to, it will be in "traveling" mode.
		% The action also checks if the place is wants to go is actually existant.
		goTo(PlaceID) {
            pre { not(state(traveling)),  zone(_,PlaceID,_,_,_) }
			post { true}
		}

		% The goToBlock(Block) action makes the agent move to a block.
		% The agent will have arrived when it is in a room, at the desired block (block with the right color)
		% The action checks if it is in a room, and not yet at the block it wants to go to.
		goToBlock(BlockID) {
			pre { not(state(traveling)),block(BlockID, Color,Room),in(Room), not(atBlock(BlockID)) }
			post { true }
		}
		
		% The pickUp action makes the agent pick up a block and therefore removing it from the ground.
		% The action also checks if the agent is not currently already holding a bloc, for it can only carry one block at a time.
		pickUp {
			pre { not(holding(Block)) }
			post { not(atBlock(Block)) }
		}
		
		% The putDown action makes the agent put down the block it's currently holding and therefore places it back on the ground.
		% The action also checks if it is in a room when attempting to drop a block, so that it may not be dropped in a corridor for example 
		% and it checks whether the agent is holding a block, for it can not put something down that it does not possess. 
		putDown {
			pre { holding(Block) }
			post {  not(holding(Block)) }
		} 

	}
}

main module [exit=nogoals] {
	program {
		% Makes the agent go to a place if the place is a goal, picks up and drops the blocks
		% Uses the goTo action from the actionspec
		if a-goal( in(Place) ) then goTo(Place).	
		
		% go to block if in same room as block
		if a-goal(atBlock(Block)) then goToBlock(Block).
		%pick up block if at it and want it
		if a-goal(holding(Block)), bel(atBlock(Block)) then pickUp.	
	}
}

event module {
	program {
		
		%if we deleted the state in order to return a block, restore an avoid executing goTo again.
		if bel(not (state(State))) then insert(state(traveling)).
	    % Update the agent's state of movement.
	    % Percepts the current state, then deletes the old state and inserts the newly percepted state as the current state
		forall bel( state(State), percept(state(NewState)) ) do delete( state(State) ) + insert( state(NewState) ).
		
		% Records when the agent is entering or leaving a room, records visited Room after leaving
		% Updates it's current situation of being in a room or not, when the agent is no longer in a room, it deletes the belief that it was
		% and states that it visited the room it left, so that it won't have to search that room again. 
		forall bel(percept(in(Room))) do insert(in(Room)).
		forall bel(percept(not(in(Room)))) do delete(in(Room))+ insert(visited(Room)).
		
		% Records when we are at a certain place
		% Deletes the old place when a new one is percepted and inserts the new place
		forall bel(at(Place), percept(at(NewPlace))) do delete(at(Place)) + insert(at(NewPlace)).
		
		% Records when we are at a block (around, close enough to pick up)
		% Deletes the old if the agent is no longer around it, inserts it when it is.
		forall bel(percept(atBlock(Block))) do insert(atBlock(Block)).
		forall bel(percept(not(atBlock(Block)))) do delete (atBlock(Block)).
 		
 		% Records when we hold a block
 		% Deletes the old if the agent no longer holds it, inserts it when it is.
		forall bel( percept(holding(Block)) ) do insert( holding(Block) ).
		forall bel( percept(not(holding(Block))) ) do delete( holding(Block) ).	
		
		% Records a current sequence index update 
		forall bel(sequenceIndex(Index), percept(sequenceIndex(NewIndex))) do delete(sequenceIndex(Index)) + insert(sequenceIndex(NewIndex)).
		%if current block no longer needs to be delivered, stop moving, return it to origin and continue searching.
		if bel(holding(Block), block(Block,Color,Room),not(nextColorInSeq(Color)),state(traveling)),goal(in('DropZone')) then drop(in('DropZone'))+delete(state(traveling))+adopt(in(Room)).
		
		%if no nextColorInSeq then all goals completed, stop searching and terminate
		forall bel(not(nextColorInSeq(Color))),goal(in(Room))do drop(in(Room)).
		
		
		
		
		
		% Record when we percieve a block is a certain color at a certain place and remember
		forall bel( percept(color(BlockID, ColorID)), percept(at(PlaceID)) ) do insert( block(BlockID, ColorID, PlaceID) ).
		% Delete a block from bel base if we see some bot removed a block and were not holding it, at that place and drop goal if it is goal to deliver block, then continue searching
		forall bel(block(Block,Color,Place),not(holding(Block)), percept(not(color(Block,Place))), percept(at(Place))) do deleteBlock.
		
		
		
		%go to the dropzone if holding a block that needs to be delivered.
		if bel(holding(Block),block(Block,Color,Place),nextColorInSeq(Color),not(in('DropZone'))) then adopt(in('DropZone')).
		
		%return block if holding a block in origin without a delivery goal.
		if bel(holding(Block),block(Block,Color,Room),not(nextColorInSeq(Color)), in(Room)) then continueSearch+putDown.
		
		%if we know a new block exists, update goals. Before droppingof as nextColor needs to be updated in next cycle.
		if bel(block(Block,Color,Room),nextColorInSeq(Color), not(holding(SomeBlock))), not(goal(holding(SomeBlock))) then updateGoals.
		
		%if in the dropzone and holding a block, drop block and continue search
		if bel(holding(Block), in('DropZone')) then dropOffBlock.
		
		
		
	}
}
module continueSearch{
	program[order=linearall]{
	
		%continue searching for blocks in rooms not yet visited
		forall bel(room(Place), not(visited(Place))) do adopt (in(Place)).
		
		
	}
}
	
module dropOffBlock{
	program[order=linearall]{
		%delete block from knowledge base
		if bel(holding(Block),block(Block,Color,Room)) then delete(block(Block,Color,Room)).
		%deliver block
		if true then putDown.
		%continue searching for blocks in rooms not yet visited except for dropzone
		if true then continueSearch.		
		
		
		
	}
}
module updateGoals{
	program[order=linearall]{
		
		%drop all current searching goals.
		forall goal(in(Room)) do drop(in(Room)).
		%if we know a next block exists go to block, one at a time
		if bel(block(Block,Color,Room),nextColorInSeq(Color)) then getBlock.

	}
}
module deleteBlock{
	program[order=linearall]{
		%delete the block we no longer see
		forall bel(block(BlockID,ColorID,PlaceID),percept(not(color(BlockID, ColorID))), percept(at(PlaceID))) do delete (block(BlockID,ColorID,PlaceID)).
		%delete all goals related to this block
		if goal(holding(Block)), bel(not(block(Block,Color,Place))) then drop(holding(Block)).
		if goal(atBlock(Block)), bel(not(block(Block,Color,Place))) then drop(atBlock(Block)).
		%continue searching.
		if true then continueSearch.		
		
		
	}
}
module getBlock{
	program{
		
		%if we know a block exists, go to block and pick it up, for all cases (not in room/ in room/ at block).
		if bel(block(Block,Color,Room),nextColorInSeq(Color),not (in(Room)))  then  adopt (in(Room))+adopt( holding(Block))+adopt (atBlock(Block)).
		if bel(block(Block,Color,Room),nextColorInSeq(Color),in(Room),not(atBlock(Block))) then adopt (atBlock(Block))+adopt (holding(Block)).
		if bel(block(Block,Color,Room),nextColorInSeq(Color),in(Room),atBlock(Block)) then adopt (holding(Block)).
	}
}
